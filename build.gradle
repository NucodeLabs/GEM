import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.MacStartup
import io.github.fvarrui.javapackager.model.SetupMode
import io.github.fvarrui.javapackager.model.WindowsExeCreationTool
import org.gradle.internal.jvm.Jvm
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
    ext.kotlinVersion = '2.2.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.github.fvarrui:javapackager:1.7.6"
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "org.jetbrains.dokka" version "2.0.0"
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

group 'ru.nucodelabs'
version '2.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

ext {
    set 'jfxVersion', '23'

    // Platform Info
    def currentOS = DefaultNativePlatform.currentOperatingSystem
    def currentArch = DefaultNativePlatform.currentArchitecture
    def currentOSVer = System.getProperty("os.version").toString()
    javaHome = Jvm.current().javaHome

    // For deps
    def osName = currentOS.isWindows() ? "windows" : currentOS.isMacOsX() ? "macosx" : "linux"
    def archName = currentArch.isArm64() && !currentOS.isWindows() ? "arm64" : "x86_64"
    set 'platform', "$osName-$archName"

    println "OS:           ${currentOS.name}"
    println "OS VERSION:   ${currentOSVer}"
    println "ARCHITECTURE: ${currentArch.name}"
    println "CLASSIFIER:   ${platform}"

    set 'runDir', "$projectDir/.run"
}

final moduleExportsJvmArgs = [
        "--add-exports", "javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
        "--add-exports", "javafx.controls/com.sun.javafx.charts=ALL-UNNAMED"
]

compileKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_21
    }
}

compileTestKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_21
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
}

javafx {
    version = jfxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

dependencies {
    /* Versions */
    final junitVersion = '5.9.2'
    final jacksonVersion = '2.19.2'
    final kotlinTestVersion = kotlinVersion
    final mapstructVersion = '1.6.3'

    /* Kotlin JavaFX Utils */
    implementation project(":kfx-utils")

    implementation project(":common-utils")

    /* Closed-Source Math Library JNI Bindings */
    implementation files("$projectDir/lib/MathVesJ-1.0.jar")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'ch.qos.logback:logback-classic:1.5.18'

    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

    /* FXML script tag Groovy support */
    implementation 'org.codehaus.groovy:groovy-jsr223:3.0.25'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'com.google.inject', name: 'guice', version: '7.0.0'
    implementation group: 'org.tinfour', name: 'TinfourCore', version: '2.1.8'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation 'org.apache.commons:commons-collections4:4.4'

    /* Math Libraries */
    implementation 'org.glassfish.expressly:expressly:5.0.0'
    implementation 'com.github.haifengl:smile-core:4.4.0'
    implementation "org.bytedeco:openblas:0.3.30-1.5.12:$platform"
    implementation "org.bytedeco:javacpp:1.5.12:$platform"
    implementation "org.bytedeco:arpack-ng:3.9.1-1.5.12:$platform"
    implementation "org.bytedeco:arpack-ng:3.9.1-1.5.12"

    /* Test Dependencies */
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinTestVersion"
    testImplementation "org.openjfx:javafx:$jfxVersion"
}

tasks.register('prepareRunDir') {
    file(runDir).mkdirs()
}

tasks.register('copyLibsToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/lib"
    into runDir
}

tasks.register('copyDataToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data"
    into "$runDir/data"
}

tasks.register('copyClrToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data/clr/002_ERT_Rainbow_2.clr"
    into "$runDir/colormap"
    rename('002_ERT_Rainbow_2.clr', 'default.clr')
}

tasks.register('cleanRunDir', Delete) {
    delete fileTree(runDir) { exclude "err-trace*.txt" }
}

tasks.register('distClr', Copy) {
    doFirst {
        file('build/GEM/colormap').mkdirs()
    }
    from 'colormap'
    into 'build/GEM/colormap'
}

tasks.withType(JavaExec).configureEach {
    dependsOn prepareRunDir, copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    jvmArgs = ["-Djava.library.path=" + file(runDir).absolutePath] + moduleExportsJvmArgs
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

test {
    dependsOn prepareRunDir, copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    useJUnitPlatform()
    systemProperty "java.library.path", file(runDir).absolutePath
    finalizedBy cleanRunDir
}

run {
    dependsOn prepareRunDir, copyClrToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

javapackager {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
    bundleJre = true
    organizationName = "NucodeLabs"
    name = "GEM"
    applicationName = "GEM"
    version = "2.0"
    vmArgs = ["-Djava.library.path=."] + moduleExportsJvmArgs
    administratorRequired = false
    additionalResources = [
            file("lib/${System.mapLibraryName("MathVES_JNI")}"),
            file("lib/${System.mapLibraryName("MathVES")}")
    ]
}

tasks.register('packageMacApp', PackageTask) {
    dependsOn build
    generateInstaller = true
    macConfig {
        macStartup = MacStartup.UNIVERSAL
        icnsFile = file("src/main/resources/img/gem.icns")
        generateDmg = true
        generatePkg = false
        codesignApp = false
    }
    additionalResources =
            javapackager.additionalResources + [file("${projectDir}/colormap")]
}

tasks.register('packageWindowsExe', PackageTask) {
    dependsOn build
    generateInstaller = false
    winConfig {
        generateSetup = false
        generateMsi = false
        exeCreationTool = WindowsExeCreationTool.launch4j
        icoFile = file("src/main/resources/img/gem.ico")
        setupMode = SetupMode.askTheUser
        removeOldLibs = true
        disableDirPage = false
        disableFinishedPage = false
        disableWelcomePage = false
        createDesktopIconTask = false
    }
    finalizedBy distClr
}

tasks.register('packageLinuxApplication', PackageTask) {
    dependsOn build
    generateInstaller = true
    linuxConfig {
        generateDeb = true
        generateRpm = true
        wrapJar = true
        pngFile = file("src/main/resources/img/gem.png")
    }
    finalizedBy distClr
}
