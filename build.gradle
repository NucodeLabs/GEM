import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
    ext.kotlinVersion = '2.2.0'
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "org.jetbrains.dokka" version "2.0.0"
}

group 'ru.nucodelabs'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

ext {
    // Platform Info
    def currentOS = DefaultNativePlatform.currentOperatingSystem
    def currentArch = DefaultNativePlatform.currentArchitecture
    // For deps
    def osName = currentOS.isWindows() ? "windows" : currentOS.isMacOsX() ? "macosx" : "linux"
    def archName = currentArch.isArm64() && !currentOS.isWindows() ? "arm64" : "x86_64"
    set 'platform', "$osName-$archName"

    println "OS:           ${currentOS.name}"
    println "OS VERSION:   ${System.getProperty("os.version")}"
    println "ARCHITECTURE: ${currentArch.name}"
    println "CLASSIFIER:   ${platform}"

    set 'runDir', "$projectDir/.run"

    /* Dependency versions */
    set 'logbackVersion', "1.5.18"
    set 'guiceVersion', '7.0.0'
}

processResources {
    filesMatching("**/*.properties") {
        expand(project.properties)
    }
}

final moduleExportsJvmArgs = [
        "--add-exports", "javafx.graphics/com.sun.glass.ui=ALL-UNNAMED",
        "--add-exports", "javafx.controls/com.sun.javafx.charts=ALL-UNNAMED"
]

compileKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_21
    }
}

compileTestKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_21
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
}

javafx {
    version = '23'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

dependencies {
    /* Versions */
    final junitVersion = '5.9.2'
    final jacksonVersion = '2.19.2'
    final kotlinTestVersion = kotlinVersion
    final mapstructVersion = '1.6.3'
    final slf4jVersion = '2.0.17'

    implementation project(":kfx-utils")
    implementation project(":common-utils")
    implementation project(":files")

    /* Closed-Source Math Library JNI Bindings */
    implementation files(
            "$projectDir/lib/MathVesJ-1.0.jar",
            "$projectDir/lib/${System.mapLibraryName("MathVES_JNI")}",
            "$projectDir/lib/${System.mapLibraryName("MathVES")}"
    )

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation("ch.qos.logback:logback-classic:$logbackVersion")
    implementation project(":app-logback-appender")
    implementation 'org.codehaus.janino:janino:3.1.12'
//    implementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'

    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"

    /* FXML script tag Groovy support */
    implementation 'org.codehaus.groovy:groovy-jsr223:3.0.25'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    implementation group: 'com.google.inject', name: 'guice', version: guiceVersion
    implementation group: 'org.tinfour', name: 'TinfourCore', version: '2.1.8'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation 'org.apache.commons:commons-collections4:4.4'

    /* Math Libraries */
    implementation 'org.glassfish.expressly:expressly:5.0.0'
    implementation 'com.github.haifengl:smile-core:4.4.0'
    implementation "org.bytedeco:openblas:0.3.30-1.5.12:$platform"
    implementation "org.bytedeco:javacpp:1.5.12:$platform"
    implementation "org.bytedeco:arpack-ng:3.9.1-1.5.12:$platform"
    implementation "org.bytedeco:arpack-ng:3.9.1-1.5.12"

    /* Test Dependencies */
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinTestVersion"
    testImplementation "org.openjfx:javafx:${javafx.version}"
}

/* Setup Runtime */

tasks.register('prepareRunDir') {
    file(runDir).mkdirs()
}

tasks.register('copyLibsToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/lib"
    into runDir
}

tasks.register('copyDataToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data"
    into "$runDir/data"
}

tasks.register('copyClrToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/colormap/default.clr"
    into "$runDir/colormap"
}

tasks.register('cleanRunDir', Delete) {
    delete fileTree(runDir) { exclude "err-trace*.txt" }
}

tasks.withType(JavaExec).configureEach {
    dependsOn copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    jvmArgs = moduleExportsJvmArgs
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

test {
    dependsOn copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    useJUnitPlatform()
    finalizedBy cleanRunDir
}

/* Package */

final jpackageInputDir = layout.buildDirectory.dir("jars").get().asFile.absolutePath

tasks.register("copyNativeDependencies", Copy) {
    from file("$projectDir/lib/${System.mapLibraryName("MathVES_JNI")}"),
            file("$projectDir/lib/${System.mapLibraryName("MathVES")}")
    into(jpackageInputDir)
}

tasks.register("copyDependencies", Copy) {
    from(configurations.runtimeClasspath)
    into(jpackageInputDir)
}

tasks.register("copyJar", Copy) {
    from(tasks.jar)
    into(jpackageInputDir)
}

final Map<String, String> jpackageCommonOptions = [
        "APP_NAME"    : "GEM",
        "APP_VERSION" : project.version.toString().replaceAll(/[^0-9.]/, ""),
        "DEST"        : layout.buildDirectory.dir("dist").get().asFile.absolutePath,
        "INPUT"       : jpackageInputDir,
        "MAIN_CLASS"  : application.mainClass.get(),
        "MAIN_JAR"    : tasks.jar.archiveFileName.get(),
        "APP_CONTENT" : file("$projectDir/src/main/resources").absolutePath,
        "RESOURCE_DIR": file("$projectDir/package_resources").absolutePath
]

tasks.register("jpackage", Exec) {
    dependsOn "build", "copyJar", "copyDependencies", "copyNativeDependencies"
    workingDir = projectDir
    environment(jpackageCommonOptions)

    def os = DefaultNativePlatform.currentOperatingSystem
    if (os.isMacOsX()) {
        commandLine "bash", "jpackage_mac.sh"
    } else if (os.isWindows()) {
        commandLine "cmd", "/c", "jpackage_win.bat"
    } else {
        throw new StopActionException("Platform is not supported: ${os}")
    }
}