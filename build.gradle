import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.MacStartup
import io.github.fvarrui.javapackager.model.SetupMode
import io.github.fvarrui.javapackager.model.WindowsExeCreationTool
import org.gradle.internal.jvm.Jvm
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
    ext.kotlinVersion = '1.9.25'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.github.fvarrui:javapackager:1.7.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id "org.jetbrains.dokka" version "1.6.21"
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.11'

    id 'org.jetbrains.kotlin.plugin.lombok' version '1.8.10'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'
apply plugin: 'kotlin'

group 'ru.nucodelabs'
version '1.0'

java {
    sourceCompatibility = JavaVersion.VERSION_19
    targetCompatibility = JavaVersion.VERSION_19
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

ext {
    set 'jfxVersion', '19'

    // Platform Info
    def currentOS = DefaultNativePlatform.currentOperatingSystem
    def currentArch = DefaultNativePlatform.currentArchitecture
    def currentOSVer = System.getProperty("os.version").toString()
    javaHome = Jvm.current().javaHome

    // For deps
    def osName = currentOS.isWindows() ? "windows" : currentOS.isMacOsX() ? "macosx" : "linux"
    def archName = currentArch.displayName.toLowerCase().contains("aarch") ? "arm64" : "x86_64"
    set 'platform', "$osName-$archName"

    println "OS:             ${currentOS.name}"
    println "OS VERSION:     ${currentOSVer}"
    println "ARCHITECTURE:   ${currentArch.name}"
    println "CLASSIFIER:     ${platform}"

    set 'runDir', "$projectDir/.run"
}

tasks.register('printPlatformInfo') {

}

compileKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_19
    }
}

compileTestKotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_19
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configJavafxRun {
    enabled = false
}

application {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
}

javafx {
    version = jfxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

dependencies {
    final junitVersion = '5.9.2'
    final lombokVersion = '1.18.38'
    final jacksonVersion = '2.19.2'
    final kotlinTestVersion = kotlinVersion

    implementation files("$projectDir/lib/MathVesJ-1.0.jar")

    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'org.glassfish.expressly:expressly:5.0.0'
    implementation 'com.github.haifengl:smile-core:4.4.0'

    implementation "org.bytedeco:openblas:0.3.30-1.5.12:$platform"
    implementation "org.bytedeco:javacpp:1.5.12:$platform"
    implementation "org.bytedeco:arpack-ng:3.9.1-1.5.12:$platform"
    implementation "org.bytedeco:arpack-ng:3.9.1-1.5.12"

    implementation 'org.codehaus.groovy:groovy-jsr223:3.0.25'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'com.google.inject', name: 'guice', version: '7.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation group: 'org.tinfour', name: 'TinfourCore', version: '2.1.8'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation 'com.github.lilvadim:kfx-utils:0.1.1'
    implementation 'org.apache.commons:commons-collections4:4.4'

    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinTestVersion"
    testImplementation "org.openjfx:javafx:$jfxVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation 'io.mockk:mockk:1.13.4'

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

tasks.register('prepareRunDir') {
    file(runDir).mkdirs()
}

tasks.register('copyLibsToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/lib"
    into runDir
}

tasks.register('copyDataToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data"
    into "$runDir/data"
}

tasks.register('copyClrToRunDir', Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data/clr/002_ERT_Rainbow_2.clr"
    into "$runDir/colormap"
    rename('002_ERT_Rainbow_2.clr', 'default.clr')
}

tasks.register('cleanRunDir', Delete) {
    delete fileTree(runDir) { exclude "err-trace*.txt" }
}

tasks.register('distClr', Copy) {
    doFirst {
        file('build/GEM/colormap').mkdirs()
    }
    from 'colormap'
    into 'build/GEM/colormap'
}


tasks.withType(JavaExec).configureEach {
    dependsOn prepareRunDir, copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    allJvmArgs = ["-Djava.library.path=" + file(runDir).absolutePath]
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

test {
    dependsOn prepareRunDir, copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    useJUnitPlatform()
    systemProperty "java.library.path", file(runDir).absolutePath
    finalizedBy cleanRunDir
}

run {
    dependsOn prepareRunDir, copyClrToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

javapackager {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
    bundleJre = true
    organizationName = "NucodeLabs"
    name = "GEM"
    applicationName = "GEM"
    version = "1.0"
    vmArgs = ["-Djava.library.path=."]
    administratorRequired = false
    additionalResources = [
            file("lib/${System.mapLibraryName("MathVES_JNI")}"),
            file("lib/${System.mapLibraryName("MathVES")}")
    ]
}

tasks.register('packageMacApp', PackageTask) {
    dependsOn build
    generateInstaller = true
    macConfig {
        macStartup = MacStartup.UNIVERSAL
        icnsFile = file("src/main/resources/img/gem.icns")
        generateDmg = true
        generatePkg = false
        codesignApp = false
    }
    additionalResources =
            javapackager.additionalResources + [file("${projectDir}/colormap")]
}

tasks.register('packageWindowsExe', PackageTask) {
    dependsOn build
    generateInstaller = false
    winConfig {
        generateSetup = false
        generateMsi = false
        exeCreationTool = WindowsExeCreationTool.launch4j
        icoFile = file("src/main/resources/img/gem.ico")
        setupMode = SetupMode.askTheUser
        removeOldLibs = true
        disableDirPage = false
        disableFinishedPage = false
        disableWelcomePage = false
        createDesktopIconTask = false
    }
    finalizedBy distClr
}

tasks.register('packageLinuxApplication', PackageTask) {
    dependsOn build
    generateInstaller = true
    linuxConfig {
        generateDeb = true
        generateRpm = true
        wrapJar = true
        pngFile = file("src/main/resources/img/gem.png")
    }
    finalizedBy distClr
}
