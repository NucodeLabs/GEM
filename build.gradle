import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.SetupMode
import io.github.fvarrui.javapackager.model.WindowsExeCreationTool
import org.gradle.internal.jvm.Jvm
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    ext.kotlin_version = '1.7.0'
    dependencies {
        classpath "io.github.fvarrui:javapackager:${DefaultNativePlatform.currentOperatingSystem.isMacOsX() ? "1.6.3" : "1.6.4"}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.jetbrains.dokka" version "1.6.21"
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.11'
    id "com.google.osdetector" version "1.7.0"
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'
apply plugin: 'kotlin'

group 'ru.nucodelabs'
version '1.0-SNAPSHOT'

sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    jfxVersion = '18.0.1'
    // Platform Info
    currentOS = DefaultNativePlatform.currentOperatingSystem
    currentArch = DefaultNativePlatform.currentArchitecture
    currentOSVer = System.getProperty("os.version").toString()
    javaHome = Jvm.current().javaHome

    // For deps
    var osName = currentOS.isWindows() ? "windows" : currentOS.isMacOsX() ? "macosx" : "linux"
    var archName = "x86_64"
    platform = "$osName-$archName"

    // JNI specific variables
    libPlatform = currentOS.isMacOsX() ? "darwin" : currentOS.isLinux() ? "linux" : "win32"
    libPrefix = currentOS.isWindows() ? "" : "lib"
    libExt = currentOS.isMacOsX() ? "dylib" : currentOS.isLinux() ? "so" : "dll"

    compiler = currentOS.isMacOsX() ? "/usr/bin/clang" : currentOS.isLinux() ? "/usr/bin/gcc" : "clang"
    arch = currentOS.isMacOsX() ? ["-arch", "x86_64", "-arch", "arm64"] : []
    optimization = "-O3"
    pic = currentOS.isWindows() ? "" : "-fPIC"
    shared = currentOS.isMacOsX() ? "-dynamiclib" : "-shared"

    jniIncludePaths = [
            "-I", file("${javaHome}/include").absolutePath,
            "-I", file("${javaHome}/include/${libPlatform}").absolutePath
    ]

    jniArgs = prepareJNIArgs()

    runDir = "$projectDir/run"
}

def prepareJNIArgs() {
    def jniArgs = new ArrayList()
    jniArgs.add(compiler)
    jniArgs.addAll(arch)
    jniArgs.add(optimization)
    jniArgs.add(pic)
    jniArgs.add(shared)
    jniArgs.addAll(jniIncludePaths)
    return jniArgs
}

task printPlatformInfo {
    println "OS:             ${currentOS.name}"
    println "OS VERSION:     ${currentOSVer}"
    println "ARCHITECTURE:   ${currentArch.name}"
    println "CLASSIFIER:     ${platform}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configJavafxRun {
    enabled = false
}

application {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
}

javafx {
    version = jfxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
}

dependencies {
    implementation files("$projectDir/lib/MathVesJ-1.0.jar")
    implementation 'org.hibernate.validator:hibernate-validator:7.0.4.Final'
    implementation 'org.glassfish.expressly:expressly:5.0.0-M1'
    implementation 'com.github.haifengl:smile-math:2.6.0'
    implementation 'com.github.haifengl:smile-interpolation:2.6.0'
    implementation 'com.github.haifengl:smile-core:2.6.0'
    implementation 'com.github.haifengl:smile-data:2.6.0'
    implementation 'com.github.haifengl:smile-plot:2.6.0'
    implementation 'com.github.haifengl:smile-io:2.6.0'
    implementation "org.bytedeco:openblas:0.3.13-1.5.5:$platform"
    implementation "org.bytedeco:javacpp:1.5.7:$platform"
    implementation "org.bytedeco:arpack-ng:3.8.0-1.5.7:$platform"
    implementation "org.bytedeco:arpack-ng:3.8.0-1.5.7"
    implementation 'org.codehaus.groovy:groovy-all:3.0.11'
    runtimeOnly("org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlin_version")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation "org.openjfx:javafx:${jfxVersion}"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'com.google.inject', name: 'guice', version: '5.1.0'
    implementation group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '5.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
//    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    // https://mvnrepository.com/artifact/org.tinfour/TinfourCore
    implementation group: 'org.tinfour', name: 'TinfourCore', version: '2.1.7'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3'
}

task forwardSolver(type: Exec) {
    workingDir "${projectDir}/orig/ForwardSolver"

    def language = ["-x", "c"]

    def sources = [
            file("${workingDir}/forwardsolverJNI.c").absolutePath,
            file("${workingDir}/VESER.C").absolutePath
    ]

    def libName = "forwardsolver"
    def out = ["-o", file("${projectDir}/lib/${libPrefix + libName}.${libExt}").absolutePath]

    def args = new ArrayList<>()
    args.addAll(jniArgs)
    args.addAll(["-I", file("${workingDir}").absolutePath])
    args.addAll(language)
    args.addAll(sources)
    args.addAll(out)

    doFirst {
        mkdir "${projectDir}/lib"
        commandLine.forEach(a -> println a)
    }

    commandLine args

    doLast {
        if (currentOS.isWindows()) {
            file("${projectDir}/lib/" + libName + ".exp").delete()
            file("${workingDir}/lib/" + libName + ".lib").delete()
        }
    }
}

task misfitFunctions(type: Exec) {
    workingDir "${projectDir}/orig/ForwardSolver"
    def language = ["-std=c++14"]

    def sources = [
            file("${workingDir}/MisfitFunctions.cpp"),
            file("${workingDir}/misfitJNI.cpp")
    ]

    def libName = "misfit"

    def out = ["-o", file("${projectDir}/lib/${libPrefix + libName}.${libExt}").absolutePath]

    def args = new ArrayList<>()
    args.addAll(jniArgs)
    args.addAll(["-I", file("${workingDir}").absolutePath])
    args.addAll(language)
    args.addAll(sources)
    args.addAll(out)

    doFirst {
        mkdir "${projectDir}/lib"
        commandLine.forEach(a -> println a)
    }

    commandLine args

    doLast {
        if (currentOS.isWindows()) {
            file("${projectDir}/lib/${libName}.exp").delete()
            file("${workingDir}/lib/${libName}.lib").delete()
        }
    }
}

task prepareRunDir {
    file(runDir).mkdirs()
}

task copyLibsToRunDir(type: Copy) {
    dependsOn prepareRunDir
    from "$projectDir/lib"
    into runDir
}

task copyDataToRunDir(type: Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data"
    into "$projectDir/run/data"
}

task copyClrToRunDir(type: Copy) {
    dependsOn prepareRunDir
    from "$projectDir/data/clr/002_ERT_Rainbow_2.clr"
    into "$projectDir/run/colormap"
    rename('002_ERT_Rainbow_2.clr', 'default.clr')
}

task cleanRunDir(type: Delete) {
    delete fileTree(runDir) { exclude "err-trace*.txt" }
}

task distClr(type: Copy) {
    doFirst {
        file('build/GEM/colormap').mkdirs()
    }
    from 'colormap'
    into 'build/GEM/colormap'
}


tasks.withType(JavaExec) {
    dependsOn prepareRunDir, copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
//    dependsOn forwardSolver, misfitFunctions
    allJvmArgs = ["-Djava.library.path=" + file("${projectDir}/run").absolutePath]
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

test {
    dependsOn prepareRunDir, copyClrToRunDir, copyDataToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    useJUnitPlatform()
    systemProperty "java.library.path", file("${projectDir}/run").absolutePath
    finalizedBy cleanRunDir
}

run {
    dependsOn prepareRunDir, copyClrToRunDir, copyLibsToRunDir
    workingDir = file(runDir)
    finalizedBy cleanRunDir
}

javapackager {
    mainClass = 'ru.nucodelabs.gem.app.StartGemApplication'
    bundleJre = true
    organizationName = "NucodeLabs"
    name = "GEM"
    applicationName = "GEM"
    version = "0.1"
    vmArgs = ["-Djava.library.path=."]
    administratorRequired = false
    useResourcesAsWorkingDir = true
    additionalResources = [
            file("lib/${libPrefix}MathVES_JNI.${libExt}"),
            file("lib/${libPrefix}MathVES.${libExt}")
    ]
}

task packageMacApp(type: PackageTask, dependsOn: build) {
    generateInstaller = false
    macConfig {
        icnsFile = file("src/main/resources/img/gem.icns")
        generateDmg = false
        generatePkg = false
    }
    additionalResources =
            javapackager.additionalResources + [file("${projectDir}/colormap")]
}

task packageWindowsExe(type: PackageTask, dependsOn: build) {
    generateInstaller = false
    winConfig {
        generateSetup = false
        generateMsi = false
        exeCreationTool = WindowsExeCreationTool.launch4j
        icoFile = file("src/main/resources/img/gem.ico")
        setupMode = SetupMode.askTheUser
        removeOldLibs = true
        disableDirPage = false
        disableFinishedPage = false
        disableWelcomePage = false
        createDesktopIconTask = false
    }
    finalizedBy distClr
}

task packageLinuxApplication(type: PackageTask, dependsOn: build) {
    generateInstaller = true
    linuxConfig {
        generateDeb = true
        generateRpm = true
        wrapJar = true
        pngFile = file("src/main/resources/img/gem.png")
    }
    finalizedBy distClr
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}