import org.gradle.internal.jvm.Jvm
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id "com.google.osdetector" version "1.7.0"
}

group 'ru.nucodelabs'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def currentOS = DefaultNativePlatform.currentOperatingSystem
def currentArch = DefaultNativePlatform.currentArchitecture
def currentOSVer = System.getProperty("os.version").toString()
def userDir = System.getProperty("user.home")

task printPlatformInfo {
    println 'OS:             ' + currentOS.name
    println 'OS VERSION:     ' + currentOSVer
    println 'ARCHITECTURE:   ' + currentArch.name
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'ru.nucodelabs.gem'
    mainClass = 'ru.nucodelabs.gem.App'
}

javafx {
    if (currentOS.isMacOsX() && currentArch.name.toLowerCase().contains("arm")) {
        sdk = "${userDir}/Library/Java/javafx-sdk-18"
    }
    version = "17"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation('org.openjfx:javafx-base:17.0.0.1')
    implementation('org.openjfx:javafx-controls:17.0.0.1')
    implementation('org.openjfx:javafx-fxml:17.0.0.1')
}

def platform = currentOS.isMacOsX() ? "darwin" : currentOS.isLinux() ? "linux" : "win32"
def libPrefix = currentOS.isWindows() ? "" : "lib"
def libExt = currentOS.isMacOsX() ? "dylib" : currentOS.isLinux() ? "so" : "dll"

def compiler = currentOS.isMacOsX() ? "/usr/bin/clang" : currentOS.isLinux() ? "/usr/bin/gcc" : "clang"
def arch = currentOS.isMacOsX() ? ["-arch", "x86_64", "-arch", "arm64"] : []
def optimization = "-O3"
def pic = currentOS.isWindows() ? "" : "-fPIC"
def shared = currentOS.isMacOsX() ? "-dynamiclib" : "-shared"

def jniIncludePaths = [
        "-I", file("${Jvm.current().javaHome}/include").absolutePath,
        "-I", file("${Jvm.current().javaHome}/include/" + platform).absolutePath
]

def jniArgs = new ArrayList<>()
jniArgs.add(compiler)
jniArgs.addAll(arch)
jniArgs.add(optimization)
jniArgs.add(pic)
jniArgs.add(shared)
jniArgs.addAll(jniIncludePaths)

task forwardSolver(type: Exec) {
    workingDir "${projectDir}/orig/ForwardSolver"

    def language = ["-x", "c"]

    def sources = [
            file("${workingDir}/forwardsolverJNI.c").absolutePath,
            file("${workingDir}/VESER.C").absolutePath
    ]

    def libName = "forwardsolver"
    def out = ["-o", file("${projectDir}/lib/" + libPrefix + libName + "." + libExt).absolutePath]

    def args = new ArrayList<>()
    args.addAll(jniArgs)
    args.addAll(["-I", file("${workingDir}").absolutePath])
    args.addAll(language)
    args.addAll(sources)
    args.addAll(out)

    doFirst {
        mkdir "${projectDir}/lib"
    }

    commandLine args

    doLast {
        if (currentOS.isWindows()) {
            file("${projectDir}/lib/" + libName + ".exp").delete()
            file("${workingDir}/lib/" + libName + ".lib").delete()
        }
    }
}

task misfitFunctions(type: Exec) {
    workingDir "${projectDir}/orig/ForwardSolver"
    def language = ["-std=c++14"]

    def sources = [
            file("${workingDir}/MisfitFunctions.cpp"),
            file("${workingDir}/misfitJNI.cpp")
    ]

    def libName = "misfit"

    def out = ["-o", file("${projectDir}/lib/" + libPrefix + libName + "." + libExt).absolutePath]

    def args = new ArrayList<>()
    args.addAll(jniArgs)
    args.addAll(["-I", file("${workingDir}").absolutePath])
    args.addAll(language)
    args.addAll(sources)
    args.addAll(out)

    doFirst {
        mkdir "${projectDir}/lib"
    }

    commandLine args

    doLast {
        if (currentOS.isWindows()) {
            file("${projectDir}/lib/" + libName + ".exp").delete()
            file("${workingDir}/lib/" + libName + ".lib").delete()
        }
    }
}

test {
    dependsOn forwardSolver, misfitFunctions
    useJUnitPlatform()
    systemProperty "java.library.path", file("${projectDir}/lib").absolutePath
}

tasks.withType(JavaExec) {
    dependsOn forwardSolver, misfitFunctions
    allJvmArgs = ["-Djava.library.path=" + file("${projectDir}/lib").absolutePath]
}